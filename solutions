Practice Joins
1.
SELECT * FROM invoice
JOIN invoice_line ON invoice_line.invoice_id = invoice.invoice_id
WHERE invoice_line.unit_price > 0.99;

2.
SELECT invoice.invoice_date, customer.first_name, customer.last_name, invoice.total 
FROM invoice
JOIN customer ON customer.customer_id = invoice.customer_id;

3.
SELECT customer.first_name, customer.last_name, employee.first_name, employee.last_name 
FROM customer
JOIN employee ON employee.employee_id = customer.support_rep_id;

4.
SELECT al.title, a.name 
FROM album al
JOIN artist a ON al.artist_id = a.artist_id;

5.
SELECT pt.track_id FROM playlist_track pt
JOIN playlist p ON pt.playlist_id = p.playlist_id
WHERE p.name = 'Music';

6.
SELECT t.name FROM track t
JOIN playlist_track pt ON pt.track_id = t.track_id
WHERE pt.playlist_id = 5;

7.
SELECT t.name, p.name FROM track t
JOIN playlist_track pt ON pt.track_id = t.track_id
JOIN playlist p ON p.playlist_id = pt.playlist_id;

8.
SELECT t.name, al.title FROM track t
JOIN genre g ON g.genre_id = t.genre_id
JOIN album al ON t.album_id = al.album_id
WHERE g.name = 'Alternative & Punk';

Practice Nested Queries
1.
SELECT * FROM invoice
WHERE invoice_id IN ( SELECT invoice_id FROM invoice_line WHERE unit_price > 0.99 );

2.
SELECT * FROM playlist_track
WHERE playlist_id IN ( SELECT playlist_id FROM playlist WHERE name = 'Music' );

3.
SELECT name FROM track
WHERE track_id IN ( SELECT track_id FROM playlist_track WHERE playlist_id = 5 );

4.
SELECT * FROM track
WHERE genre_id IN ( SELECT genre_id FROM genre WHERE name = 'Comedy' );

5.
SELECT * FROM track
WHERE album_id IN ( SELECT album_id FROM album WHERE title = 'Fireball' );

6.
SELECT * FROM track
WHERE album_id IN ( 
	SELECT album_id FROM album 
  Where artist_id IN ( 
    SELECT artist_id FROM artist 
    WHERE name = 'Queen' ));

Practice Updating Rows
1.
UPDATE customer
SET fax = null
WHERE fax IS NOT null;

2.
UPDATE customer
SET company = 'Self'
WHERE company IS NULL;

3.
UPDATE customer
SET last_name = 'Thompson'
WHERE first_name = 'Julia' AND last_name = 'Barnett';

4.
UPDATE customer
SET support_rep_id = 4
WHERE email = 'luisrojas@yahoo.cl';

5.
UPDATE track t
SET composer = 'The darkness around us'
WHERE genre_id ( SELECT genre_id FROM genre WHERE name = 'Metal' ) 
AND composer IS NULL;

Group By
1.
SELECT COUNT(*), g.name FROM track t
JOIN genre g ON g.genre_id = t.genre_id
GROUP BY g.name;

2.
SELECT COUNT(*), g.name FROM track t
JOIN genre g ON g.genre_id = t.genre_id
WHERE g.name = 'Pop' OR g.name = 'Rock'
GROUP BY g.name;

3.
SELECT COUNT(*), a.name FROM artist a
JOIN album al ON al.artist_id = a.artist_id
GROUP BY a.name;


Use Distinct
1.
SELECT DISTINCT composer FROM track;

2.
SELECT DISTINCT billing_postal_code FROM invoice;

3.
SELECT DISTINCT company FROM customer;

Delete Rows
2.
DELETE FROM practice_delete
WHERE type = 'bronze';

3.
DELETE FROM practice_delete
WHERE type = 'silver';

4.
DELETE FROM practice_delete
WHERE value = 150;

eCommerce Simulation
CREATE TABLE users (
  user_id SERIAL PRIMARY KEY,
  name VARCHAR(250),
  email VARCHAR(250)
);

CREATE TABLE products (
  product_id SERIAL PRIMARY KEY,
  name VARCHAR(250),
  price INT
);

CREATE TABLE orders (
  order_id SERIAL PRIMARY KEY,
  ref INT REFERENCES products(product_id)
);

INSERT INTO users ( name, email ) VALUES ( 'Sydney', 'squid@email.com' );
INSERT INTO users ( name, email ) VALUES ( 'Davis', 'drod@email.com' );
INSERT INTO users ( name, email ) VALUES ( 'Ben', 'benzajamin@email.com' );
INSERT INTO products ( name, price ) VALUES ( 'soccer ball', 20 );
INSERT INTO products ( name, price ) VALUES ( 'basketball', 35 );
INSERT INTO products ( name, price ) VALUES ( 'tennis ball', 2 );
INSERT INTO orders ( ref ) VALUES ( 1 );
INSERT INTO orders ( ref ) VALUES ( 2 );
INSERT INTO orders ( ref ) VALUES ( 3 );

SELECT * FROM products
WHERE product_id IN ( SELECT ref FROM orders WHERE order_id = 1 );

SELECT * FROM orders;

SELECT SUM(price) FROM products
WHERE product_id IN ( SELECT ref FROM orders WHERE order_id = 2 );